take the realtion form the request request.data.relations 
and use it create relation ContactWithRelation
so it will will be 
(p1:Personne)-[:Proprietaire]-(ph1:Phone)-[each relation of relations]->(ph2:Phone)-[:Proprietaire]-(p2:Personne)
without attribute 
use this relation in the rest of phase insted of contactWithPhone

 MATCH (p1:Personne)-[:Proprietaire]-(ph1:Phone)-[ap:Appel_telephone]->(ph2:Phone)-[:Proprietaire]-(p2:Personne)
        WHERE p1 <> p2
        WITH p1, p2, ap.duree_sec AS call_duration
        ORDER BY p1.identity, p2.identity
        WITH p1, p2, 
             SUM(call_duration) AS total_call_duration, 
             COUNT(*) AS call_count
        MERGE (p1)-[e:contactWithPhone]->(p2)
        SET e.total_call_duration = total_call_duration,
            e.call_count = call_count;


@api_view(['POST'])
def Node_clasification(request):
    # Split the query into individual statements
    print("request  : " ,request.data)
    queries = [
        """
        // Part 1: Create contactWithPhone relationships
        MATCH (p1:Personne)-[:Proprietaire]-(ph1:Phone)-[ap:Appel_telephone]->(ph2:Phone)-[:Proprietaire]-(p2:Personne)
        WHERE p1 <> p2
        WITH p1, p2, ap.duree_sec AS call_duration
        ORDER BY p1.identity, p2.identity
        WITH p1, p2, 
             SUM(call_duration) AS total_call_duration, 
             COUNT(*) AS call_count
        MERGE (p1)-[e:contactWithPhone]->(p2)
        SET e.total_call_duration = total_call_duration,
            e.call_count = call_count;
        """,
        """
        // Part 2: Calculate _Lvl_of_Implications for each Personne node
        MATCH (p:Personne)
        OPTIONAL MATCH (p)-[r:Impliquer]-(:Affaire)  
        WITH p, COUNT(r) AS num_affaires_LvL0

        OPTIONAL MATCH (p)-[:contactWithPhone]-(p1:Personne)-[r1:Impliquer]-(:Affaire)
        WITH p, num_affaires_LvL0, COUNT(r1) AS num_affaires_LvL1

        OPTIONAL MATCH (p)-[:contactWithPhone]-(p1:Personne)
                      -[:contactWithPhone]-(p2:Personne)
                      -[r2:Impliquer]-(:Affaire)
        WITH p, num_affaires_LvL0, num_affaires_LvL1, COUNT(r2) AS num_affaires_LvL2

        OPTIONAL MATCH (p)-[:contactWithPhone]-(p1:Personne)
                      -[:contactWithPhone]-(p2:Personne)
                      -[:contactWithPhone]-(p3:Personne)
                      -[r3:Impliquer]-(:Affaire)
        WITH p, num_affaires_LvL0, num_affaires_LvL1, num_affaires_LvL2, COUNT(r3) AS num_affaires_LvL3

        OPTIONAL MATCH (p)-[:contactWithPhone]-(p1:Personne)
                      -[:contactWithPhone]-(p2:Personne)
                      -[:contactWithPhone]-(p3:Personne)
                      -[:contactWithPhone]-(p4:Personne)
                      -[r4:Impliquer]-(:Affaire)
        WITH p, num_affaires_LvL0, num_affaires_LvL1, num_affaires_LvL2, num_affaires_LvL3, COUNT(r4) AS num_affaires_LvL4

        SET p._Lvl_of_Implications = [num_affaires_LvL0, num_affaires_LvL1, num_affaires_LvL2, num_affaires_LvL3, num_affaires_LvL4];
        """,
        """
        // Part 3: Initialize properties for all Personne nodes
        MATCH (p:Personne)
        SET p._class = ["neutre"],
            p._affireOpretioneele = [],
            p._affiresoutin = [],
            p._affireleader = [];
        """,
        """
        // Part 4: Assign "operationeel" to Personne nodes with _Lvl_of_Implications[0] > 0
        MATCH (p:Personne)
        WHERE "neutre" IN p._class AND p._Lvl_of_Implications[0] > 0
        SET p._class = p._class + "operationeel"
        WITH p
        MATCH (p)-[:Impliquer]-(a:Affaire)
        WITH p, COLLECT(a.identity) AS affaire_ids
        SET p._affireOpretioneele = affaire_ids;
        """,
        """
        // Part 5: Assign "soutien" to Personne nodes connected to "operationeel" nodes
        MATCH (p1:Personne)-[:contactWithPhone]-(p2:Personne)
        WHERE "operationeel" IN p1._class AND p2._Lvl_of_Implications[1] > p1._Lvl_of_Implications[0]
        SET p2._class = CASE WHEN NOT "soutien" IN p2._class THEN p2._class + "soutien" ELSE p2._class END,
            p2._affiresoutin = p2._affiresoutin + p1._affireOpretioneele;
        """,
        """
        WITH range(1, 1) AS levels
        UNWIND levels AS i
        MATCH (p1:Personne)-[:contactWithPhone]-(p2:Personne)
        WHERE "soutien" IN p1._class AND p2._Lvl_of_Implications[i+1] > p1._Lvl_of_Implications[i]
        SET p2._class = CASE WHEN NOT "soutien" IN p2._class THEN p2._class + "soutien" ELSE p2._class END,
            p2._affiresoutin = p2._affiresoutin + p1._affiresoutin;
        """,
        """
        // Part 6: Assign "leader" to Personne nodes that qualify
        WITH range(1, 1) AS leader_levels
        UNWIND leader_levels AS i
        MATCH (p1:Personne)
        WHERE "soutien" IN p1._class
        WITH p1, i,
             ALL(p2 IN [(p1)-[:contactWithPhone]-(p2:Personne) | p2] 
                 WHERE p2._Lvl_of_Implications[i] < p1._Lvl_of_Implications[i+1]) AS level_leader
        WITH p1, COLLECT(level_leader) AS leader_flags
        WHERE ANY(flag IN leader_flags WHERE flag = true)
        SET p1._class = CASE WHEN NOT "leader" IN p1._class THEN p1._class + "leader" ELSE p1._class END,
            p1._affireleader = p1._affiresoutin;
        """,
        """
        // Part 7: Delete all contactWithPhone relationships
        MATCH (p1:Personne)-[r:contactWithPhone]-(p2:Personne)
        DELETE r;
        """
    ]

    # Execute each query sequentially
    results = []
    for query in queries:
        data = run_query(query)
        results.append(data)

    # Return the result as a JSON response
    return JsonResponse(results, safe=False)