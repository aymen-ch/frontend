import React, { useState, useRef } from 'react';
import { XLg, Dash, Fullscreen, FullscreenExit, PlusCircle } from 'react-bootstrap-icons';
import Draggable from 'react-draggable';
import axios from 'axios';
import { useTranslation } from 'react-i18next';
import { Controlled as CodeMirror } from 'react-codemirror2';
import 'codemirror/lib/codemirror.css';
import 'codemirror/theme/dracula.css';
import './cyphermode';
import { BASE_URL_Backend } from '../../Platforme/Urls';


////*****
//  This compont is a window to add a new action (re usable cypher query  )
//  it could creted manual  or generated by LLM
// 
// 
// 
// 
//  */

const AddActionWindow = ({ node, onClose }) => {
  const { t } = useTranslation();
  const [isMaximized, setIsMaximized] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    node_type: node?.group || 'Personne',
    id_field: 'id',
    query: '',
    node_id: node?.id || '',
  });
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [selectedModel, setSelectedModel] = useState('llama3.2:latest');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isVerifying, setIsVerifying] = useState(false);
  const [validationResult, setValidationResult] = useState(null);
  const nodeRef = useRef(null);
  const token = localStorage.getItem('authToken');

  // Re-added available models and handler based on previous version
  const availableModels = ['llama3', 'mistral', 'grok'];

  if (!node) return null;

  const toggleMaximize = () => {
    setIsMaximized(!isMaximized);
  };

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleModelSelect = (model) => {
    setSelectedModel(model);
  };

  const generateCypherQuery = async () => {
    if (!selectedModel) {
      setError(t('add_action_window.error_no_model'));
      return;
    }

    setIsGenerating(true);
    setError(null);
    setValidationResult(null);

    try {
      const defaultQuestion = t('add_action_window.default_question', { nodeType: formData.node_type });
      const response = await axios.post(
        `${BASE_URL_Backend}/generate_action/`,
        {
          question: defaultQuestion,
          node_type: formData.node_type,
          model: selectedModel,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        }
      );

      if (response.data.cypher) {
        setFormData({ ...formData, query: response.data.cypher });
        setSuccess(t('add_action_window.success_generated'));
      } else {
        setError(t('add_action_window.error_generate_failed'));
      }
    } catch (err) {
      setError(err.response?.data?.error || t('add_action_window.error_generate_failed'));
    } finally {
      setIsGenerating(false);
    }
  };

  const verifyCypherQuery = async () => {
    if (!formData.query.trim()) {
      setError(t('add_action_window.error_no_query'));
      return;
    }

    setIsVerifying(true);
    setError(null);
    setValidationResult(null);

    try {
      const response = await axios.post(
        `${BASE_URL_Backend}/validate_cypher/`,
        {
          query: formData.query,
          node_type: formData.node_type,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        }
      );

      if (response.data.isValid) {
        setValidationResult({
          isValid: true,
          message: t('add_action_window.validation_valid'),
          correctedQuery: response.data.correctedQuery || formData.query,
        });
        if (response.data.correctedQuery) {
          setFormData({ ...formData, query: response.data.correctedQuery });
        }
      } else {
        setValidationResult({
          isValid: false,
          message: response.data.error || t('add_action_window.validation_invalid'),
          correctedQuery: response.data.correctedQuery || null,
        });
        if (response.data.correctedQuery) {
          setFormData({ ...formData, query: response.data.correctedQuery });
        }
      }
    } catch (err) {
      setError(err.response?.data?.error || t('add_action_window.error_verify_failed'));
    } finally {
      setIsVerifying(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);

    if (formData.name.length > 50) {
      setError(t('add_action_window.error_name_too_long'));
      return;
    }

    try {
      const response = await axios.post(
        `${BASE_URL_Backend}/add_action/`,
        formData,
        {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.status === 201) {
        setSuccess(t('add_action_window.success_added'));
        setFormData({
          name: '',
          description: '',
          node_type: node.group || 'Personne',
          id_field: 'id',
          query: '',
          node_id: node.id || '',
        });
        setSelectedModel('');
        setValidationResult(null);
        setTimeout(() => onClose(), 1500);
      }
    } catch (err) {
      setError(err.response?.data?.error || t('add_action_window.error_add_action_failed'));
    }
  };

  const windowContent = (
    <div
      className={`w-[500px] h-auto rounded-lg bg-white shadow-lg transition-all duration-300 flex flex-col ${
        isMaximized ? 'w-[95vw] h-[90vh]' : ''
      }`}
    >
      <div
        className={`flex justify-between items-center p-[10px_15px] bg-gradient-to-r from-[#3a66db] to-[#1e45b9] text-white ${
          isMaximized ? 'cursor-default' : 'cursor-move'
        }`}
      >
        <div className="flex items-center">
          <PlusCircle size={20} className="mr-2" />
          <span className="text-sm font-medium">{t('add_action_window.title')}</span>
        </div>
        <div className="flex items-center">
          <button
            className="w-[30px] h-[30px] flex items-center justify-center rounded text-white hover:bg-white/10 transition-colors"
            title={t('add_action_window.minimize')}
          >
            <Dash size={16} />
          </button>
          <button
            className="w-[30px] h-[30px] flex items-center justify-center rounded text-white hover:bg-white/10 transition-colors mx-2"
            onClick={toggleMaximize}
            title={isMaximized ? t('add_action_window.restore') : t('add_action_window.maximize')}
          >
            {isMaximized ? <FullscreenExit size={16} /> : <Fullscreen size={16} />}
          </button>
          <button
            className="w-[30px] h-[30px] flex items-center justify-center rounded text-white hover:bg-white/10 transition-colors"
            onClick={onClose}
            title={t('add_action_window.close')}
          >
            <XLg size={16} />
          </button>
        </div>
      </div>
      <div className="flex-1 p-3 bg-gray-100 overflow-y-auto">
        <div className="max-w-4xl mx-auto">
          <h4 className="mb-4 text-[#3a66db] font-medium">{t('add_action_window.header')}{node.group}</h4>
          <form onSubmit={handleSubmit}>
            <input type="hidden" name="node_type" value={formData.node_type} />
            <input type="hidden" name="node_id" value={formData.node_id} />
            <input type="hidden" name="id_field" value={formData.id_field} />
            {error && (
              <div className="mb-3 p-3 bg-red-100 text-red-700 rounded-lg flex justify-between items-center">
                {error}
                <button className="text-red-700 hover:text-red-900" onClick={() => setError(null)}>×</button>
              </div>
            )}
            {success && (
              <div className="mb-3 p-3 bg-green-100 text-green-700 rounded-lg flex justify-between items-center">
                {success}
                <button className="text-green-700 hover:text-green-900" onClick={() => setSuccess(null)}>×</button>
              </div>
            )}
            {validationResult && (
              <div
                className={`mb-3 p-3 rounded-lg flex justify-between items-start ${
                  validationResult.isValid ? 'bg-green-100 text-green-700' : 'bg-yellow-100 text-yellow-700'
                }`}
              >
                <div>
                  {validationResult.message}
                  {validationResult.correctedQuery &&
                    validationResult.correctedQuery !== formData.query && (
                      <div>
                        <strong>{t('add_action_window.corrected_query')}:</strong> {validationResult.correctedQuery}
                      </div>
                    )}
                </div>
                <button
                  className={`${
                    validationResult.isValid ? 'text-green-700 hover:text-green-900' : 'text-yellow-700 hover:text-yellow-900'
                  }`}
                  onClick={() => setValidationResult(null)}
                >
                  ×
                </button>
              </div>
            )}
            <div className="mb-3">
              <label className="block mb-1 font-medium">{t('add_action_window.action_name_label')}</label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleChange}
                placeholder={t('add_action_window.action_name_placeholder')}
                maxLength={50}
                required
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
              <p className="text-sm text-gray-500 mt-1">
                {t('add_action_window.name_length_info', { remaining: 50 - formData.name.length })}
              </p>
            </div>
            <div className="mb-3">
              <label className="block mb-1 font-medium">{t('add_action_window.action_description_label')}</label>
              <textarea
                rows={3}
                name="description"
                value={formData.description}
                onChange={handleChange}
                placeholder={t('add_action_window.action_description_placeholder')}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
              />
            </div>
            <div className="mb-3">
              <label className="block mb-1 font-medium">{t('add_action_window.llm_generate_label')}</label>
              <div className="flex items-center space-x-2">
                <select
                  value={selectedModel}
                  onChange={(e) => handleModelSelect(e.target.value)}
                  className="p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                >
                  <option value="">Select a model</option>
                  {availableModels.map((model) => (
                    <option key={model} value={model}>
                      {model}
                    </option>
                  ))}
                </select>
                <button
                  type="button"
                  onClick={generateCypherQuery}
                  disabled={isGenerating || !selectedModel}
                  className="px-4 py-2 border border-blue-500 text-blue-500 rounded-md hover:bg-blue-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {isGenerating ? t('add_action_window.generating') : t('add_action_window.generate_button')}
                </button>
              </div>
            </div>
            <div className="mb-3">
              <label className="block mb-1 font-medium">{t('add_action_window.query_label')}</label>
              <CodeMirror
                value={formData.query}
                options={{
                  mode: 'text/x-cypher',
                  theme: 'dracula',
                  lineNumbers: true,
                  lineWrapping: true,
                  tabSize: 2,
                  indentWithTabs: false,
                  smartIndent: true,
                  placeholder: t('add_action_window.query_placeholder'),
                }}
                onBeforeChange={(editor, data, value) => {
                  setFormData({ ...formData, query: value });
                }}
                editorDidMount={(editor) => {
                  editor.setSize('100%', '150px');
                }}
                className="codemirror-custom"
              />
            </div>
            <div className="flex justify-end space-x-2">
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
              >
                {t('add_action_window.cancel_button')}
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                {t('add_action_window.save_button')}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );

  return (
    <div className="fixed inset-0 bg-black/50 flex justify-center items-center z-[1050] backdrop-blur-sm">
      {isMaximized ? (
        windowContent
      ) : (
        <Draggable nodeRef={nodeRef} handle=".cursor-move" bounds="parent">
          <div ref={nodeRef}>{windowContent}</div>
        </Draggable>
      )}
    </div>
  );
};

export default AddActionWindow;